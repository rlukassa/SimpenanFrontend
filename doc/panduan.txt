===========================================
Panduan Kecil Backend Golang (Gin Framework)
Project: Website Pencarian Elemen (Little Alchemy)
===========================================

# Struktur Proses Request
- Router → Controller → Service → Response
- Bersihkan arsitektur supaya scalable dan mudah dibaca.

# Endpoint Utama
POST /api/search
Request Body JSON:
{
  "start" : sugar
  "algorithm": "bfs"
  "target": <HASIL YANG AKAN DIRETURN, DALAM TREE> 
}
Keterangan:
- elements / recipe -> [database dari webscraping Little Alchemy]
- start : elemen yang dipilih user
- target: leaf dari tree / elemen dasar yang dari database / elemen yang tidak dapat dipecah lagi (tersedia didatabase, bukan dari input user) 
- algorithm: pilihan "bfs", "dfs", "bidirectional"

# Sisi FrontEnd 
- terdapat 3 pages : 
--- Home.jsx (hanya tombol start, menuju ke Menu.jsx dengan tampilan menarik)
--- Menu.jsx (berisi pemilihan elemen yang akan diproses, pilihan algortima proses dfs, bfs atau bidirectional, dan )

# Alur Logika Umum
1. Terima input start, algorithm.
2. Validasi input (tidak kosong, tidak aneh).
3. Pilih algoritma:
   - BFS  => services.BFS()
   - DFS  => services.DFS()
   - Bidirectional => services.BidirectionalSearch()
4. Jalankan algoritma tampilkan visualisasi Tree dengan secara jelas Live Update dengan React Flow dsb
5. Return JSON hasil ke client. --> arahkan ke React Flow (untuk menampikan visualisasi tree) dan return Waktu Eksekusi dan Banyak node yang dilalui


# Contoh Response
Berhasil:
{
  "path": ["air", "heat", "steam"],
  "steps": 2
}
Error:
{
  "error": "Invalid algorithm selected"
}

# Error Handling
- 400 Bad Request → input salah / algorithm tidak dikenali.
- 500 Internal Server Error → pencarian gagal.

# Tips Penting
- Gunakan c.ShouldBindJSON() untuk ambil body request.
- Gunakan c.JSON() untuk membalas response.
- Tambahkan middleware CORS supaya React frontend bisa fetch API.
- Pisahkan controller (handle input/output) dan service (handle algoritma).
- Standardisasi format response menggunakan helper di utils/response.go

# Catatan Algoritma
- BFS cocok untuk pencarian shortest path.
- DFS cocok untuk eksplorasi dalam.
- Bidirectional Search cepat untuk graf besar.

# Struktur Minimal
backend/
├── main.go
├── router/
│   └── router.go
├── controllers/
│   └── recipeController.go
├── services/
│   └── search.go
├── utils/
│   └── response.go
├── models/
│   └── recipe.go
├── data/
│   └── elements.json
└── config/
    └── config.go

# Dependencies Golang
- gin-gonic/gin: HTTP web framework
- cors: middleware untuk CORS
- (opsional) logrus: untuk log lebih keren

===========================================
END OF web.txt
===========================================
